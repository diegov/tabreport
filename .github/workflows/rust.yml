name: Rust

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  CARGO_TERM_COLOR: always
  DEBIAN_FRONTEND: noninteractive
jobs:
  build:
    runs-on: ubuntu-20.04

    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-node@v2
      with:
        node-version: '17'
    - uses: abbbi/github-actions-tune@0b48641ceb645d4ad4573b0d17b770d85770f9c7
    - name: Cache cargo packages
      uses: actions/cache@v2
      with:
        path: |
          ~/.cargo/
          ~/.rustup/
        key: ${{ runner.os }}-cargo2-${{ hashFiles('**/Cargo.toml', '**/Cargo.lock', 'rust-toolchain') }}
        restore-keys: |
          ${{ runner.os }}-cargo2-
    - run: rustup component add rustfmt
    - run: rustup component add clippy
    - run: sudo apt-get install -y --no-install-recommends build-essential curl dbus-x11 jq libasound2 libdbus-1-dev libdbus-glib-1-2 libgtk-3-0 libx11-xcb1 libxt6 libxtst6 pkg-config python3 python3-pip python3-venv python3-wheel
    - run: pip3 install --user 'yq==2.12.*'
    - run: mkdir -p ~/.local/bin/
    - name: Set Rust flags
      run: "cat rustflags | sed s/'^export '/''/gi | grep -v '^#' >> $GITHUB_ENV"
    - name: Set XDG_CACHE_HOME
      # No spaces allowed here, too much work to escape later in shell commands
      run: "echo XDG_CACHE_HOME=${HOME}/cache/ >> $GITHUB_ENV"
    - name: Create XDG_CACHE_HOME directory
      run: "mkdir $XDG_CACHE_HOME"
    - name: Build
      run: ./build.sh check
    - name: Native extension install check
      run: ./install_native.sh
    - name: Set Artifact env var
      run: echo XPI_FILE=$(cat extension/artifact.txt) >> $GITHUB_ENV
    - uses: actions/upload-artifact@v2
      with:
        name: extension
        path: extension/tabreport-*.xpi

    - name: Cache pip packages
      uses: actions/cache@v2
      with:
        path: |
          ${{ env.XDG_CACHE_HOME }}/virtualenv
        key: ${{ runner.os }}-pip2-${{ hashFiles('integration_tests/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip2-
    - name: Cache firefox versions
      uses: actions/cache@v2
      with:
        path: |
          ${{ env.XDG_CACHE_HOME }}/extension_testing
        key: ${{ runner.os }}-ff2-${{ hashFiles('integration_tests/firefox_versions', 'integration_tests/firefox.py') }}
        restore-keys: |
          ${{ runner.os }}-ff2-
    - run: ./run_tests.sh "$XPI_FILE" 2>>test.log
      working-directory: integration_tests
      env:
        VIRTUALENV_DIR: ${{ env.XDG_CACHE_HOME }}/virtualenv
    - name: Collect test logs
      uses: actions/upload-artifact@v2
      if: ${{ always() }}
      with:
        name: test.log
        path: integration_tests/*.log
